package serveur;

import certifications.BanManager;
import certifications.MusicManager;
import exceptions.EmpruntException;
import exceptions.ReservationException;
import manager.DocumentManager;
import model.Abonne;
import model.DVD;
import model.Document;
import java.io.*;
import java.net.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

public class ServeurApplication {

    public static void main(String[] args) {
        demarrerServeur(2000, "R√©servation");
        demarrerServeur(3000, "Emprunt");
        demarrerServeur(4000, "Retour");
    }

    private static void demarrerServeur(int port, String nomService) {
        new Thread(() -> {
            try (ServerSocket server = new ServerSocket(port)) {
                System.out.println("À∂·µî ·µï ·µîÀ∂ Service " + nomService + " actif sur port " + port);
                while (true) {
                    Socket client = server.accept();
                    new Thread(() -> traiterClient(client, port)).start();
                }
            } catch (IOException e) {
                System.err.println("‚ï•Ôπè‚ï• Erreur " + nomService + " : " + e.getMessage());
            }
        }).start();
    }

    private static void traiterClient(Socket client, int port) {
        try (BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
             PrintWriter out = new PrintWriter(client.getOutputStream(), true)) {

            switch(port) {
                case 2000: traiterReservation(in, out); break;
                case 3000: traiterEmprunt(in, out); break;
                case 4000: traiterRetour(in, out); break;
            }

        } catch (SocketException e) {  // <-- Ajout sp√©cifique
            System.err.println("[‚ùã] Client d√©connect√© : " + e.getMessage());
        } catch (IOException | InterruptedException e) {
            System.err.println("Erreur client: " + e.getMessage());
        }
    }

    private static void traiterReservation(BufferedReader in, PrintWriter out) throws IOException, InterruptedException {


        try {
            // Lecture num√©ro abonn√©
            out.println("Entrez votre num√©ro d'abonn√© :");
            String input = in.readLine().trim();
            if ("QUIT".equalsIgnoreCase(input)) {
                System.out.println("[‚ùã] D√©connexion client initi√©e");
                return; // Arr√™t imm√©diat du traitement
            }
            int numAbonne = lireEntier(in, out);
            if (numAbonne == -1) return;


            // V√©rification abonn√©
            Abonne abonne = DocumentManager.getInstance().getAbonne(numAbonne);
            if (abonne == null) {
                System.err.println("[( ¬¨_¬¨)] Tentative de r√©servation avec abonn√© inexistant: " + numAbonne);
                out.println("‚ï•Ôπè‚ï• R√©f√©rence document invalide");
                return;
            }

            // Lecture num√©ro document
            out.println("Entrez le num√©ro du document :");
            int numDoc = lireEntier(in, out);
            if (numDoc == -1) return;

            // R√©cup√©ration document
            Document doc = DocumentManager.getInstance().getDocument(numDoc);
            if (doc == null) {
                System.err.println("[( ¬¨_¬¨)] Tentative d'acc√®s document inexistant: " + numDoc);
                out.println("‚ï•Ôπè‚ï• R√©f√©rence document invalide");
                return;
            }

            // Bloc synchronis√©
            synchronized(doc) {
                System.out.println("[‚ú©] Traitement r√©servation pour document " + numDoc);

                if (doc.reserveur() == null) {
                    try {
                        // Tentative r√©servation
                        doc.reserver(abonne);
                        DocumentManager.getInstance().ajouterReservation(numDoc);

                        // Log succ√®s
                        String heureFin = LocalDateTime.now().plusHours(1)
                                .format(DateTimeFormatter.ofPattern("HH:mm"));
                        System.out.println("[(‚∏ù‚∏ù> ·¥ó‚Ä¢‚∏ù‚∏ù)] R√©servation r√©ussie - Doc " + numDoc
                                + " par abonn√© " + numAbonne + " jusqu'√† " + heureFin);
                        out.println("(‚∏ù‚∏ù> ·¥ó‚Ä¢‚∏ù‚∏ù) R√©serv√© jusqu'√† " + heureFin);

                    } catch (ReservationException e) {
                        System.err.println("[‚ï•Ôπè‚ï•] √âchec r√©servation: " + e.getMessage());
                        out.println("‚ï•Ôπè‚ï• Erreur: " + e.getMessage());
                    }
                } else {
                    // Gestion conflit
                    LocalDateTime finReservation = DocumentManager.getInstance().getDateFinReservation(numDoc);
                    long tempsRestant = ChronoUnit.SECONDS.between(LocalDateTime.now(), finReservation);

                    System.out.println("[###] Conflit r√©solution pour doc " + numDoc
                            + " - Temps restant: " + tempsRestant + "s");

                    if (tempsRestant <= 60) {
                        System.out.println("[~~~~] D√©marrage musique pour abonn√© " + numAbonne);
                        MusicManager.jouerMusique("attente.wav");
                        out.println("~~~~ Attente musicale d√©marr√©e...");

                        try {
                            while (tempsRestant-- > 0 && doc.reserveur() != null) {
                                Thread.sleep(1000);
                            }
                        } finally {
                            MusicManager.arreterMusique();
                            System.out.println("[^^] Musique stopp√©e pour abonn√© " + numAbonne);
                        }

                        if (doc.reserveur() == null) {
                            doc.reserver(abonne);
                            System.out.println("[!!!] R√©servation acquise apr√®s attente - Doc " + numDoc);
                            out.println("(‚∏ù‚∏ù> ·¥ó‚Ä¢‚∏ù‚∏ù) R√©servation r√©ussie apr√®s attente !");
                        } else {
                            System.out.println("√âchec attente - Doc " + numDoc + " r√©cup√©r√©");
                            out.println("Le document a √©t√© pris par un autre utilisateur");
                        }
                    } else {
                        System.out.println("Temps restant trop long: " + tempsRestant + "s");
                        out.println("Temps restant trop important: " + tempsRestant + "s");
                    }
                }
            }

        } catch (NumberFormatException e) {
            System.err.println("[(‚Ä¢Àã _ Àä‚Ä¢)] Format num√©rique invalide");
            out.println("‚ï•Ôπè‚ï• Veuillez entrer uniquement des chiffres !");
        } catch (Exception e) {
            System.err.println("[‚ï•Ôπè‚ï•] Erreur critique: " + e.getMessage());
            out.println("‚ï•Ôπè‚ï• Erreur syst√®me - Veuillez r√©essayer");
        }
    }

    // M√©thode helper pour lecture s√©curis√©e
    private static int lireEntier(BufferedReader in, PrintWriter out) throws IOException {


        try {
            return Integer.parseInt(in.readLine().trim());
        } catch (NumberFormatException e) {
            System.err.println("[‚ï•Ôπè‚ï•] Entr√©e non num√©rique d√©tect√©e");
            out.println("‚ï•Ôπè‚ï• Entr√©e invalide : nombre attendu");
            return -1;
        }
    }

    private static void reserverDocument(Document doc, int numAbonne, PrintWriter out) {
        try {
            Abonne abonne = DocumentManager.getInstance().getAbonne(numAbonne);
            doc.reserver(abonne);
            DocumentManager.getInstance().ajouterReservation(doc.numero());
            out.println("(·µî‚ó°·µî) R√©serv√© jusqu'√† " + LocalDateTime.now().plusHours(1).toLocalTime());
        } catch (Exception e) {
            out.println("‚ï•Ôπè‚ï• Erreur : " + e.getMessage());
        }
    }

    // Dans ServeurApplication.java
    private static void traiterEmprunt(BufferedReader in, PrintWriter out) throws IOException {


        try {
            // 1. Lecture des informations
            out.println("Entrez votre num√©ro d'abonn√© :");
            String input = in.readLine().trim();
            if ("QUIT".equalsIgnoreCase(input)) {
                System.out.println("[üì°] D√©connexion client initi√©e");
                return; // Arr√™t imm√©diat du traitement
            }
            int numAbonne = Integer.parseInt(in.readLine().trim());
            System.out.println("[‚ÑπÔ∏è] Tentative d'emprunt par abonn√© #" + numAbonne);

            // 2. V√©rification abonn√©
            Abonne abonne = DocumentManager.getInstance().getAbonne(numAbonne);
            if (abonne == null) {
                System.err.println("[‚ï•Ôπè‚ï•] Abonn√© inconnu: " + numAbonne);
                out.println("‚ï•Ôπè‚ï• Abonn√© inconnu");
                return;
            }

            // 3. V√©rification bannissement
            if (BanManager.estBanni(numAbonne)) {
                String dateFin = BanManager.getDateFinBan(numAbonne).format(DateTimeFormatter.ISO_DATE);
                System.err.println("[‚õî] Abonn√© banni tent√©: " + numAbonne + " jusqu'au " + dateFin);
                out.println("‚õî Vous √™tes banni jusqu'au " + dateFin);
                return;
            }

            // 4. S√©lection document
            out.println("Entrez le num√©ro du document :");
            int numDoc = Integer.parseInt(in.readLine().trim());
            System.out.println("[‚ÑπÔ∏è] Demande emprunt doc #" + numDoc + " par abonn√© #" + numAbonne);

            Document doc = DocumentManager.getInstance().getDocument(numDoc);

            // 5. V√©rifications document
            if (doc == null) {
                System.err.println("[‚ï•Ôπè‚ï•] Document introuvable: " + numDoc);
                out.println("‚ï•Ôπè‚ï• Document introuvable");
                return;
            }
            if (doc.emprunteur() != null) {
                System.err.println("Document d√©j√† emprunt√©: " + numDoc);
                out.println("Document d√©j√† emprunt√©");
                return;
            }
            if (doc.reserveur() != null && !doc.reserveur().equals(abonne)) {
                int reserveurId = doc.reserveur().getNumero();
                System.err.println("Conflit r√©servation doc " + numDoc + " par abonn√© #" + reserveurId);
                out.println("R√©serv√© par abonn√© #" + reserveurId);
                return;
            }

            // 6. V√©rification √¢ge pour DVD
            if (doc instanceof DVD && ((DVD) doc).isAdulte() && abonne.calculerAge() < 16) {
                System.err.println("[üîû] Acc√®s refus√© √† doc " + numDoc + " pour abonn√© #" + numAbonne);
                out.println("üîû Acc√®s refus√© - R√©serv√© aux +16 ans");
                return;
            }

            // 7. Validation emprunt
            doc.emprunter(abonne);
            System.out.println("[(·µî‚ó°·µî)] Emprunt r√©ussi - Doc " + numDoc + " par abonn√© " + numAbonne);
            out.println("(·µî‚ó°·µî) Emprunt r√©ussi !");

            if (doc.reserveur() != null) {
                DocumentManager.getInstance().supprimerReservation(numDoc);
                System.out.println("[üóëÔ∏è] R√©servation supprim√©e pour doc " + numDoc);
            }

        } catch (NumberFormatException e) {
            System.err.println("[‚ï•Ôπè‚ï•] Format num√©rique invalide: " + e.getMessage());
            out.println("‚ï•Ôπè‚ï• Format num√©rique invalide");
        } catch (EmpruntException e) {
            System.err.println("[‚ï•Ôπè‚ï•] √âchec emprunt: " + e.getMessage());
            out.println("‚ï•Ôπè‚ï• Erreur : " + e.getMessage());
        } catch (Exception e) {
            System.err.println("Erreur inattendue: " + e.getClass().getSimpleName() + " - " + e.getMessage());
            out.println("‚ï•Ôπè‚ï• Erreur syst√®me - Veuillez r√©essayer");
            e.printStackTrace();
        }
    }

    private static void traiterRetour(BufferedReader in, PrintWriter out) throws IOException {


        try {
            System.out.println("[‚ÑπÔ∏è] D√©but traitement retour...");

            // 1. Lecture document
            out.println("Entrez le num√©ro du document :");
            String input = in.readLine().trim();
            if ("QUIT".equalsIgnoreCase(input)) {
                System.out.println("[üì°] D√©connexion client initi√©e");
                return; // Arr√™t imm√©diat du traitement
            }
            int numDoc = Integer.parseInt(in.readLine().trim());
            System.out.println("Document #" + numDoc + " s√©lectionn√© pour retour");

            Document doc = DocumentManager.getInstance().getDocument(numDoc);

            // 2. V√©rification existence
            if (doc == null) {
                System.err.println("[(·óí·ó£·óï)’û] Document introuvable: " + numDoc);
                out.println("(·óí·ó£·óï)’û Document inconnu");
                return;
            }

            // R√©cup√©ration √©tat avant modification
            Abonne ancienEmprunteur = doc.emprunteur();

            // 2b. Validation emprunteur existant
            if (ancienEmprunteur == null) {
                System.err.println("[üö®] Op√©ration invalide : Document non emprunt√©");
                out.println("(·óí·ó£·óï)’û Ce document n'est pas actuellement emprunt√©");
                return;
            }

            boolean avaitAlerte = DocumentManager.getInstance().hasAlerte(numDoc);
            System.out.println("[üë§] Ancien emprunteur: " + ancienEmprunteur.getNumero());

            // 3. V√©rification √©tat
            out.println("Le document est-il endommag√© ? (oui/non)");
            String reponse = in.readLine().trim().toLowerCase();
            boolean estEndommage = reponse.equals("oui");
            System.out.println("[üîç] √âtat document: " + (estEndommage ? "D√âGRAD√â" : "OK"));

            // 4. Traitement retour
            doc.retourner(estEndommage);
            out.println("Àô·¥óÀô Retour enregistr√© !");

            // 5. Notifications compl√©mentaires
            if (estEndommage) {
                System.out.println("[‚ö†Ô∏è] D√©gradation signal√©e - Doc " + numDoc);
                out.println("üì¢ Un mod√©rateur contr√¥lera le document");
            }

            if (avaitAlerte) {
                System.out.println("[üìß] Alerte envoy√©e pour doc " + numDoc);
            }

            // Nettoyage r√©servation
            if (doc.reserveur() != null) {
                System.out.println("[üóëÔ∏è] R√©servation nettoy√©e - Doc " + numDoc);
            }

            out.flush();

        } catch (NumberFormatException e) {
            System.err.println("[‚ï•Ôπè‚ï•] Format document invalide: " + e.getMessage());
            out.println("‚ï•Ôπè‚ï• Veuillez entrer un nombre valide");
        } catch (Exception e) {
            System.err.println("[(À∂¬∫‚§ô¬∫À∂)] Erreur critique: " + e.getClass().getSimpleName());
            e.printStackTrace();
            out.println("(À∂¬∫‚§ô¬∫À∂) Erreur syst√®me - Op√©ration annul√©e");
        } finally {
            System.out.println("[‚úß*ÔΩ°Ÿ©(Àä·óúÀã*)Ÿà‚úß*ÔΩ°] Fin traitement retour\n");
        }
    }
}

